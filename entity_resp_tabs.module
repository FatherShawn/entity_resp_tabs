<?php
/**
 * @file entity_resp_tabs.module
 *
 * @author Shawn P. Duncan <shawn@c3design.org>
 * @date   10/19/14,  8:51 AM
 *
 * @brief
 *
 * Copyright 2014 by Shawn P. Duncan.  This code is
 * released under the GNU General Public License.
 * Which means that it is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt
 */

/* Implementation of hook_field_formatter_info
 */
function entity_resp_tabs_field_formatter_info() {
  return array(
    'entity_resp_tabs_default' => array(
      'label' => t('Horizontal Tabs'),
      'description' => t('Displays the rendered entity in responsive, horizontal tabs.'),
      'field types' => array('entityreference'),
    ),
  );
}

/*
 * Implementation of hook_libraries_info()
 * */
function entity_resp_tabs_libraries_info() {
  $libraries['Responsive-Tabs'] = array(
    'name' => 'jQuery Responsive Tabs',
    'vendor url' => 'https://github.com/jellekralt/Responsive-Tabs/',
    'download url' => 'https://github.com/jellekralt/Responsive-Tabs/archive/master.zip',
    'version callback' => 'entity_resp_tabs_lib_version_check',
    'version arguments' => array(
      'file' => 'Responsive-Tabs.jquery.json',
    ),
    'files' => array(
      'js' => array('js/jquery.responsiveTabs.min.js'),
      'css' => array('css/responsive-tabs.css'),
    ),
  );
  return $libraries;
}

function entity_resp_tabs_lib_version_check($arguments) {
  $json_file = $arguments['library path'] . '/' . $arguments['version arguments']['file'];
  $library_info = drupal_json_decode(file_get_contents($json_file));
  $version_parsed = explode('.', $library_info['version'],4);
  if ($version_parsed[0] >= 1 && $version_parsed[1] >= 4) {
    return true;
  }
  else {
    return false;
  }
}

/*
 * Implementation of hook_theme to register entity_resp_tabs_field__entityreference()
 * */
function entity_resp_tabs_theme($existing, $type, $theme, $path) {
  return array(
    'field__entityreference' => array(
      'function' => 'entity_resp_tabs_field__entityreference',
      'render element' => 'element',
      'base hook' => 'field',
     ),
  );
}


/*
 * Implements hook_preprocess_HOOK
 * */
function entity_resp_tabs_preprocess_field(&$variables) {
  if (($library = libraries_load('Responsive-Tabs')) && !empty($library['installed'])) {
    $options = array(
      'type' => 'file',
      'scope' => 'footer',
      'every_page' => false,
      'group' => JS_DEFAULT,
    );
    drupal_add_js(drupal_get_path('module', 'entity_resp_tabs') . "/js/entity_resp_tabs.js", $options);
  }
  else {
    // Something went wrong.
    // This contains a detailed (localized) error message.
    $error_message = $library['error message'];
    watchdog('Entity Responsive Tabs', $error_message, null, WATCHDOG_ERROR);
  }
  //@todo implement multiple tabs per page with namespaced id
  //$element_id = 'resp-tab-' . drupal_html_class($variables['element']['#field_name']);
  $element_id = 'entity-resp-tab-container';
  if ($variables['element']['#field_type'] == 'entityreference' &&
    $variables['element']['#formatter'] == 'entity_resp_tabs_default'
  ) {
    $variables['content_attributes_array'] = array(
      'id' => $element_id,
    );
    $count = 1;
    foreach ($variables['items'] as $delta => $item) {
      $variables['item_attributes_array'][$delta]['id'] = 'tab-' . $count;
      reset($item);
      $entity_type = key($item);
      //@todo check for multi-lingual compatibility
      $tab_title = entity_label($entity_type, $variables['element']['#items'][$delta]['entity']);
      $variables['entity_resp_tabs_links'][$delta] = array(
        '#title' => $tab_title,
        '#fragment' => '#tab-' . $count,
      );
      $count++;
    }
  }
}

function entity_resp_tabs_field__entityreference ($variables) {
  $output = '';
  // Render the label, if it's not hidden.
  if (!$variables['label_hidden']) {
    $output .= '<div class="field-label"' . $variables['title_attributes'] . '>' . $variables['label'] . ':&nbsp;</div>';
  }

  // Render the items.
  $output .= '<div class="field-items"' . $variables['content_attributes'] . '>';
  // Render the tab links
  if (isset($variables['entity_resp_tabs_links'])) {
    $output .= '<ul>';
    foreach ($variables['entity_resp_tabs_links'] as $link) {
      $output .= '<li><a href="' . $link['#fragment'] . '">' . $link['#title'] . '</a></li>';
    }
    $output .= '</ul>';
  }
  foreach ($variables['items'] as $delta => $item) {
    $classes = 'field-item ' . ($delta % 2 ? 'odd' : 'even');
    $output .= '<div class="' . $classes . '"' . $variables['item_attributes'][$delta] . '>' . drupal_render($item) . '</div>';
  }
  $output .= '</div>';

  // Render the top-level DIV.
  $output = '<div class="' . $variables['classes'] . '"' . $variables['attributes'] . '>' . $output . '</div>';

  return $output;
}

/**
 * Implements hook_field_formatter_prepare_view().
 * We are dependent on entityreference.module so we use theirs
 */
function entity_resp_tabs_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  entityreference_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, $items, $displays);
}

/**
 * Implements hook_field_formatter_view().
 */
function entity_resp_tabs_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $content = array();
  $display['settings']['view_mode'] = 'default'; //@todo implement settings
  $settings = $display['settings'];
  // Rebuild the items list to contain only those with access.
  foreach ($items as $key => $item) {
    if (empty($item['access'])) {
      unset($items[$key]);
    }
  }
  foreach ($items as $delta => $item) {
    // Protect ourselves from recursive rendering.
    static $depth = 0;
    $depth++;
    if ($depth > 20) {
      throw new EntityReferenceRecursiveRenderingException(t('Recursive rendering detected when rendering entity @entity_type(@entity_id). Aborting rendering.', array(
        '@entity_type' => $entity_type,
        '@entity_id' => $item['target_id']
      )));
    }
    $entity = clone $item['entity'];
    if ($entity_type == 'node') {
      //$list[$delta] = $entity->title;
      $entity->title = '';
    }
    unset($entity->content);
    $content[$delta] = entity_view($field['settings']['target_type'], array($item['target_id'] => $entity), $settings['view_mode'], $langcode, TRUE);
  }
  return $content;
}


